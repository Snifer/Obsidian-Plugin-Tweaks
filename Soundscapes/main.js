/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SoundscapesPlugin
});
module.exports = __toCommonJS(main_exports);

var import_obsidian = require("obsidian");

var SOUNDSCAPES = {
  lofi_b: {
    id: "lofi_b",
    name: "Hola beats",
    nowPlayingText: "Hola Beats",
    isLiveVideo: false,
    youtubeId: "i0c2H7UUwi4",
    customLink: ""
  },

  ghibli: {
   id: "ghibli",
   name: "Ghibli Music Collection 2023",
   nowPlayingText: "Ghibli Music Collection 2023",
   isLiveVideo: !1,
   youtubeId: "Sx4xVyXHl60"
  },
  lofi: {
    id: "lofi",
    name: "Lofi beats",
    nowPlayingText: "Lofi beats",
    isLiveVideo: !0,
    youtubeId: "jfKfPfyJRdk"
  },
  spa: {
    id: "spa",
    name: "Spa atmosphere",
    nowPlayingText: "Spa atmosphere",
    isLiveVideo: !0,
    youtubeId: "luxiL4SQVVE"
  },
  sims: {
    id: "sims",
    name: "The Sims complete soundtrack",
    nowPlayingText: "The Sims complete soundtrack",
    isLiveVideo: !1,
    youtubeId: "wKnkQdsITUE"
  },
  thunder: {
    id: "thunder",
    name: "Thunderstorm",
    nowPlayingText: "Thunderstorm",
    isLiveVideo: !1,
    youtubeId: "nDq6TstdEi8"
  },
  fire: {
    id: "fire",
    name: "Cozy fireplace",
    nowPlayingText: "Cozy fireplace",
    isLiveVideo: !1,
    youtubeId: "rCYzRXLWcIg"
  },
  birds: {
    id: "birds",
    name: "Birds chirping",
    nowPlayingText: "Birds chirping",
    isLiveVideo: !1,
    youtubeId: "mFjU4JuJgnM"
  },
  ocean: {
    id: "ocean",
    name: "Ocean waves",
    nowPlayingText: "Ocean waves",
    isLiveVideo: !1,
    youtubeId: "bn9F19Hi1Lk"
  },
  jazz: {
    id: "jazz",
    name: "Relaxing jazz",
    nowPlayingText: "Relaxing jazz",
    isLiveVideo: !1,
    youtubeId: "tNvh2w8lTes"
  },
  coffeeshop: {
    id: "coffeeshop",
    name: "Coffee shop ambience",
    nowPlayingText: "Coffee shop ambience",
    isLiveVideo: !1,
    youtubeId: "uiMXGIG_DQo"
  },
  animalcrossing: {
    id: "animalcrossing",
    name: "Animal Crossing New Horizons",
    nowPlayingText: "Animal Crossing New Horizons",
    isLiveVideo: !1,
    youtubeId: "zru-TLye9jo"
  },
  nintendo: {
    id: "nintendo",
    name: "Calm Nintendo music",
    nowPlayingText: "Calm Nintendo music",
    isLiveVideo: !1,
    youtubeId: "sA0qrPOMy2Y"
  }
};

var DEFAULT_SETTINGS = {
  soundscape: "lofi",
  volume: 25,
  autoplay: !1,
  customLink: ""
};

var SoundscapesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.debouncedSaveSettings = import_obsidian.debounce(this.saveSettings, 500, true);
    this.statusBarItem = this.addStatusBarItem();
    this.statusBarItem.addClass("soundscapesroot");
    this.createPlayer();
    this.addSettingTab(new SoundscapesSettingsTab(this.app, this));
  }

  onunload() {
  }
  /**
   * Create the Youtube player
   */
  createPlayer() {
    this.statusBarItem.createEl("script", {
      attr: {
        src: "https://www.youtube.com/iframe_api"
      }
    });

    this.statusBarItem.createEl("div", {
      attr: { id: "player" },
      cls: "soundscapesroot-player"
    });

    window.onYouTubeIframeAPIReady = () => {
      this.player = new YT.Player("player", {
        height: "100",
        width: "200",
        playerVars: {
          playsinline: 1,
          fs: 0,
          disablekb: 1,
          controls: 0
        },
        events: {
          onReady: this.onPlayerReady.bind(this),
          onStateChange: this.onStateChange.bind(this)
        }
      });
    };
  }
  /**
   * Once the player is ready, create the controls and play some music! (or not if autoplay is disabled)
   */
  onPlayerReady() {
    this.createControls();
    this.onSoundscapeChange();
    this.settings.autoplay || this.player.pauseVideo();
  }
  /**
   * Update the UI when the state of the video changes
   */
  onStateChange({ data: state }) {
    switch (state) {
      case -1:
        this.playButton.show();
        this.pauseButton.hide();
        break;
      case 1:
        this.playButton.hide();
        this.pauseButton.show();
        break;
      case 2:
        this.playButton.show();
        this.pauseButton.hide();
        break;
      case 0:
        this.onSoundscapeChange();
    }
  }
  /**
   * Create all the UI elements
   */
createControls() {
    this.playButton = this.statusBarItem.createEl("button", {}), (0, import_obsidian.setIcon)(this.playButton, "play"), this.playButton.onclick = () => {
      SOUNDSCAPES[this.settings.soundscape].isLiveVideo && this.player.seekTo(this.player.getDuration()), this.player.playVideo();
    }, this.pauseButton = this.statusBarItem.createEl("button", {}), (0, import_obsidian.setIcon)(this.pauseButton, "pause"), this.pauseButton.onclick = () => this.player.pauseVideo(), this.nowPlaying = this.statusBarItem.createEl("div", {
      cls: "soundscapesroot-nowplaying"
    });
    let volumeIcons = this.statusBarItem.createEl("div", {
      cls: "soundscapesroot-volumeIcons"
    });
    this.volumeMutedIcon = volumeIcons.createEl("div", {
      cls: "soundscapesroot-volumeIcons-iconmuted"
    }), (0, import_obsidian.setIcon)(this.volumeMutedIcon, "volume-x"), this.volumeLowIcon = volumeIcons.createEl("div", {
      cls: "soundscapesroot-volumeIcons-iconlow"
    }), (0, import_obsidian.setIcon)(this.volumeLowIcon, "volume-1"), this.volumeHighIcon = volumeIcons.createEl("div", {
      cls: "soundscapesroot-volumeIcons-iconhigh"
    }), (0, import_obsidian.setIcon)(this.volumeHighIcon, "volume-2"), this.volumeSlider = this.statusBarItem.createEl("input", {
      attr: {
        type: "range",
        min: 0,
        max: 100,
        value: this.settings.volume
      }
    }), this.onVolumeChange(), this.volumeSlider.addEventListener(
      "input",
      this.onVolumeChange.bind(this)
    );
  }

  onVolumeChange() {
    let volume = parseInt(this.volumeSlider.value);
    this.player.setVolume(volume), volume === 0 ? (this.volumeMutedIcon.show(), this.volumeLowIcon.hide(), this.volumeHighIcon.hide()) : volume <= 50 ? (this.volumeMutedIcon.hide(), this.volumeLowIcon.show(), this.volumeHighIcon.hide()) : (this.volumeMutedIcon.hide(), this.volumeLowIcon.hide(), this.volumeHighIcon.show()), this.settings.volume = volume, this.debouncedSaveSettings();
  }

  onSoundscapeChange() {
    if (this.settings.customLink) {
      this.player.loadVideoById({
        videoId: this.settings.customLink
      });
    } else {
      this.player.loadVideoById({
        videoId: SOUNDSCAPES[this.settings.soundscape].youtubeId
      });
    }

    this.settings.customLink
      ? this.nowPlaying.setText("Now Playing Custom Video")
      : this.nowPlaying.setText(
          SOUNDSCAPES[this.settings.soundscape].nowPlayingText
        );
  }

  async loadSettings() {
    let data = await this.loadData() || {};
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }

  async saveSettings() {
    console.log("saving...");
    await this.saveData(this.settings);
  }
};

var SoundscapesSettingsTab = class extends import_obsidian.PluginSettingTab {
  display() {
    let { containerEl } = this;
    containerEl.empty();

    new import_obsidian.Setting(containerEl)
      .setName("Soundscape")
      .setDesc("Which soundscape would you like to listen to?")
      .addDropdown((component) => {
        Object.values(SOUNDSCAPES).forEach((soundscape) => {
          component.addOption(soundscape.id, soundscape.name);
        });

        component.setValue(this.plugin.settings.soundscape);
        component.onChange((value) => {
          this.plugin.settings.soundscape = value;
          this.plugin.onSoundscapeChange();
          this.plugin.saveSettings();
          this.display();
        });
      });

    new import_obsidian.Setting(containerEl)
      .setName("Autoplay soundscape")
      .setDesc("Automatically play chosen soundscape on startup?")
      .addToggle((component) => {
        component.setValue(this.plugin.settings.autoplay);
        component.onChange((value) => {
          this.plugin.settings.autoplay = value;
          this.plugin.saveSettings();
        });
      });
/*
Funcion agregada por Snifer de www.sniferl4bs.com para la adicion de un video
nuevo para la reproducciÃ³n de YouTube
*/
    new import_obsidian.Setting(containerEl)
      .setName("Custom YouTube Link")
      .setDesc("Enter a custom id YouTube: ex. https://www.youtube.com/watch?v=i0c2H7UUwi4 \n id: i0c2H7UUwi4 ")
      .addText((text) => {
        text.setValue(this.plugin.settings.customLink);
        text.onChange((value) => {
          this.plugin.settings.customLink = value;
          this.plugin.onSoundscapeChange();
          this.plugin.saveSettings();
        });
      });
  }
};
